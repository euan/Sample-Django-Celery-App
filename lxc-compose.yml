# LXC Compose Configuration for Django+Celery Sample Application
# This configuration creates two containers:
# 1. sample-datastore: PostgreSQL + Redis
# 2. sample-django-app: Django application with Celery workers
#
# Usage: lxc-compose up -f lxc-compose.yml

version: '1.0'

containers:
  sample-datastore:
    template: ubuntu
    release: jammy
    # IP auto-assigned starting from .11
    aliases:
      - datastore
      - postgres
      - postgresql
      - db
      - database
      - redis
      - cache
    
    packages:
      - postgresql
      - postgresql-contrib
      - redis-server
    
    services:
      postgresql:
        type: system
        config: |
          # Configure PostgreSQL to listen on all interfaces
          sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /etc/postgresql/14/main/postgresql.conf
          echo 'host    all             all             10.0.3.0/24            md5' >> /etc/postgresql/14/main/pg_hba.conf
          systemctl restart postgresql
      
      redis:
        type: system
        config: |
          # Configure Redis to listen on all interfaces
          sed -i 's/bind 127.0.0.1 ::1/bind 0.0.0.0/g' /etc/redis/redis.conf
          sed -i 's/protected-mode yes/protected-mode no/g' /etc/redis/redis.conf
          systemctl restart redis-server

  sample-django-app:
    template: ubuntu
    release: jammy
    # IP auto-assigned
    aliases:
      - app
      - web
      - django
    
    mounts:
      - .:/app  # Mount current directory to /app in container
    
    packages:
      - python3
      - python3-pip
      - python3-venv
      - python3-dev
      - build-essential
      - libpq-dev
      - nginx
      - supervisor
      - git
      - redis-tools
      - postgresql-client
    
    environment:
      DEBUG: "True"
      DB_NAME: djangosample
      DB_USER: djangouser
      DB_PASSWORD: djangopass123
      DB_HOST: datastore  # Using alias instead of full container name
      DB_PORT: "5432"
      REDIS_HOST: datastore  # Using alias instead of full container name
      REDIS_PORT: "6379"
      CELERY_BROKER_URL: redis://datastore:6379/0
      CELERY_RESULT_BACKEND: redis://datastore:6379/0
      ALLOWED_HOSTS: "*"
    
    services:
      django:
        command: /app/venv/bin/python /app/src/manage.py runserver 0.0.0.0:8000
        directory: /app/src
        autostart: true
        autorestart: true
        user: www-data
        stdout_logfile: /var/log/django/django.log
        stderr_logfile: /var/log/django/django_err.log
      
      celery:
        command: /app/venv/bin/celery -A config worker -l info
        directory: /app/src
        autostart: true
        autorestart: true
        user: www-data
        stdout_logfile: /var/log/celery/celery.log
        stderr_logfile: /var/log/celery/celery_err.log
      
      celery-beat:
        command: /app/venv/bin/celery -A config beat -l info
        directory: /app/src
        autostart: true
        autorestart: true
        user: www-data
        stdout_logfile: /var/log/celery/celery-beat.log
        stderr_logfile: /var/log/celery/celery-beat_err.log
      
      nginx:
        type: system
        config: |
          # Nginx configuration
          cat > /etc/nginx/sites-available/django-app <<'EOF'
          server {
              listen 80;
              server_name _;
              
              location /static/ {
                  alias /app/static/;
              }
              
              location /media/ {
                  alias /app/media/;
              }
              
              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF
          ln -sf /etc/nginx/sites-available/django-app /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t && systemctl restart nginx
    
    post_install:      
      - name: "Setup Python environment"
        command: |
          cd /app
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      
      - name: "Create directories"
        command: |
          mkdir -p /var/log/django /var/log/celery /run/django
          mkdir -p /app/static /app/media
      
      - name: "Create database user and database if they don't exist"
        command: |
          # Wait for PostgreSQL to be ready
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Create user if it doesn't exist
          sudo -u postgres psql -tc "SELECT 1 FROM pg_user WHERE usename = '${DB_USER}'" | grep -q 1 || {
            echo "Creating user ${DB_USER}..."
            sudo -u postgres createuser -d -r -s "${DB_USER}"
            sudo -u postgres psql -c "ALTER USER \"${DB_USER}\" PASSWORD '${DB_PASSWORD}';"
          }
          
          # Create database if it doesn't exist
          sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw "${DB_NAME}" || {
            echo "Creating database ${DB_NAME}..."
            sudo -u postgres createdb -O "${DB_USER}" "${DB_NAME}"
          }
          
          echo "Database setup completed."
      
      - name: "Run migrations"
        command: |
          cd /app/src
          source ../venv/bin/activate
          export DJANGO_SETTINGS_MODULE=config.settings
          python manage.py makemigrations api tasks
          python manage.py migrate
          python manage.py collectstatic --noinput
      
      - name: "Create superuser"
        command: |
          cd /app/src
          source ../venv/bin/activate
          export DJANGO_SETTINGS_MODULE=config.settings
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else None" | python manage.py shell
      
      - name: "Set permissions"
        command: |
          chown -R www-data:www-data /app
          chmod -R 755 /app
          chmod -R 775 /app/media /app/static /var/log/django /var/log/celery

# Port forwarding configuration
port_forwards:
  - host_port: 8080
    container: sample-django-app
    container_port: 80
    protocol: tcp
    description: "Django application (Nginx)"
  
  - host_port: 8000
    container: sample-django-app
    container_port: 8000
    protocol: tcp
    description: "Django development server"
  
  - host_port: 5432
    container: sample-datastore
    container_port: 5432
    protocol: tcp
    description: "PostgreSQL database"
  
  - host_port: 6379
    container: sample-datastore
    container_port: 6379
    protocol: tcp
    description: "Redis cache"

# Dependencies
dependencies:
  sample-django-app:
    depends_on:
      - sample-datastore
    start_delay: 10  # Wait 10 seconds after datastore starts